### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type AuthPayload {
  expiresIn: Int!
  token: String!
  user: User!
}

type Event {
  description: String
  duration: Int!
  generateClientSheet: Boolean!
  id: Int!
  name: String!
  owner: User
  price: Float
}

input EventCreateInput {
  description: String
  duration: Int!
  generateClientSheet: Boolean
  name: String!
  owner: UserCreateOneWithoutEventsInput
  price: Float
}

input EventUpdateInput {
  description: String
  duration: Int
  generateClientSheet: Boolean
  id: Int
  name: String
  owner: UserUpdateOneWithoutEventsInput
  price: Float
}

input EventWhereUniqueInput {
  id: Int
}

type Mutation {
  createOneEvent(data: EventCreateInput!): Event!
  deleteOneEvent(where: EventWhereUniqueInput!): Event
  deleteOneUser(where: UserWhereUniqueInput!): User
  signin(email: String!, password: String!): AuthPayload!
  signup(email: String!, firstName: String!, lastName: String!, password: String!, passwordConfirmation: String!): AuthPayload!
  updateCurrentUser(email: String, firstName: String, lastName: String, newPassword: String, newPasswordConfirmation: String, oldPassword: String): User!
  updateOneEvent(data: EventUpdateInput!, where: EventWhereUniqueInput!): Event
  upsertOneEvent(create: EventCreateInput!, update: EventUpdateInput!, where: EventWhereUniqueInput!): Event!
}

type Query {
  event(where: EventWhereUniqueInput!): Event
  events(after: EventWhereUniqueInput, before: EventWhereUniqueInput, first: Int, last: Int, skip: Int): [Event!]!
  me: AuthPayload!
  user(where: UserWhereUniqueInput!): User
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int, skip: Int): [User!]!
}

type User {
  email: String!
  events: [Event!]!
  firstName: String!
  id: Int!
  lastName: String!
}

input UserCreateOneWithoutEventsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutEventsInput
}

input UserCreateWithoutEventsInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
}

input UserUpdateOneWithoutEventsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutEventsInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutEventsDataInput
  upsert: UserUpsertWithoutEventsInput
}

input UserUpdateWithoutEventsDataInput {
  email: String
  firstName: String
  id: Int
  lastName: String
  password: String
}

input UserUpsertWithoutEventsInput {
  create: UserCreateWithoutEventsInput!
  update: UserUpdateWithoutEventsDataInput!
}

input UserWhereUniqueInput {
  email: String
  id: Int
}
