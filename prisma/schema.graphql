### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type AuthPayload {
  expiresIn: Int!
  token: String!
  user: User!
}

type AvailabilityModifier {
  end: DateTime!
  id: Int!
  isExclusive: Boolean!
  start: DateTime!
  user: User
}

input AvailabilityModifierCreateInput {
  end: DateTime!
  isExclusive: Boolean!
  start: DateTime!
  user: UserCreateOneWithoutAvailabilityModifiersInput
}

input AvailabilityModifierCreateManyWithoutUserInput {
  connect: [AvailabilityModifierWhereUniqueInput!]
  create: [AvailabilityModifierCreateWithoutUserInput!]
}

input AvailabilityModifierCreateWithoutUserInput {
  end: DateTime!
  isExclusive: Boolean!
  start: DateTime!
}

input AvailabilityModifierScalarWhereInput {
  AND: [AvailabilityModifierScalarWhereInput!]
  end: DateTimeFilter
  id: IntFilter
  isExclusive: BooleanFilter
  NOT: [AvailabilityModifierScalarWhereInput!]
  OR: [AvailabilityModifierScalarWhereInput!]
  start: DateTimeFilter
  userId: NullableIntFilter
}

input AvailabilityModifierUpdateInput {
  end: DateTime
  id: Int
  isExclusive: Boolean
  start: DateTime
  user: UserUpdateOneWithoutAvailabilityModifiersInput
}

input AvailabilityModifierUpdateManyDataInput {
  end: DateTime
  id: Int
  isExclusive: Boolean
  start: DateTime
}

input AvailabilityModifierUpdateManyWithoutUserInput {
  connect: [AvailabilityModifierWhereUniqueInput!]
  create: [AvailabilityModifierCreateWithoutUserInput!]
  delete: [AvailabilityModifierWhereUniqueInput!]
  deleteMany: [AvailabilityModifierScalarWhereInput!]
  disconnect: [AvailabilityModifierWhereUniqueInput!]
  set: [AvailabilityModifierWhereUniqueInput!]
  update: [AvailabilityModifierUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [AvailabilityModifierUpdateManyWithWhereNestedInput!]
  upsert: [AvailabilityModifierUpsertWithWhereUniqueWithoutUserInput!]
}

input AvailabilityModifierUpdateManyWithWhereNestedInput {
  data: AvailabilityModifierUpdateManyDataInput!
  where: AvailabilityModifierScalarWhereInput!
}

input AvailabilityModifierUpdateWithoutUserDataInput {
  end: DateTime
  id: Int
  isExclusive: Boolean
  start: DateTime
}

input AvailabilityModifierUpdateWithWhereUniqueWithoutUserInput {
  data: AvailabilityModifierUpdateWithoutUserDataInput!
  where: AvailabilityModifierWhereUniqueInput!
}

input AvailabilityModifierUpsertWithWhereUniqueWithoutUserInput {
  create: AvailabilityModifierCreateWithoutUserInput!
  update: AvailabilityModifierUpdateWithoutUserDataInput!
  where: AvailabilityModifierWhereUniqueInput!
}

input AvailabilityModifierWhereUniqueInput {
  id: Int
}

input BooleanFilter {
  equals: Boolean
  not: Boolean
}

scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

enum Day {
  FRIDAY
  MONDAY
  SATURDAY
  SUNDAY
  THURSDAY
  TUESDAY
  WEDNESDAY
}

type Event {
  description: String
  duration: Int!
  generateClientSheet: Boolean!
  id: Int!
  name: String!
  price: Float
  user: User
}

input EventCreateInput {
  description: String
  duration: Int!
  generateClientSheet: Boolean
  name: String!
  price: Float
  user: UserCreateOneWithoutEventsInput
}

input EventCreateManyWithoutUserInput {
  connect: [EventWhereUniqueInput!]
  create: [EventCreateWithoutUserInput!]
}

input EventCreateWithoutUserInput {
  description: String
  duration: Int!
  generateClientSheet: Boolean
  name: String!
  price: Float
}

input EventScalarWhereInput {
  AND: [EventScalarWhereInput!]
  description: NullableStringFilter
  duration: IntFilter
  generateClientSheet: BooleanFilter
  id: IntFilter
  name: StringFilter
  NOT: [EventScalarWhereInput!]
  OR: [EventScalarWhereInput!]
  price: NullableFloatFilter
  userId: NullableIntFilter
}

input EventUpdateInput {
  description: String
  duration: Int
  generateClientSheet: Boolean
  id: Int
  name: String
  price: Float
  user: UserUpdateOneWithoutEventsInput
}

input EventUpdateManyDataInput {
  description: String
  duration: Int
  generateClientSheet: Boolean
  id: Int
  name: String
  price: Float
}

input EventUpdateManyWithoutUserInput {
  connect: [EventWhereUniqueInput!]
  create: [EventCreateWithoutUserInput!]
  delete: [EventWhereUniqueInput!]
  deleteMany: [EventScalarWhereInput!]
  disconnect: [EventWhereUniqueInput!]
  set: [EventWhereUniqueInput!]
  update: [EventUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [EventUpdateManyWithWhereNestedInput!]
  upsert: [EventUpsertWithWhereUniqueWithoutUserInput!]
}

input EventUpdateManyWithWhereNestedInput {
  data: EventUpdateManyDataInput!
  where: EventScalarWhereInput!
}

input EventUpdateWithoutUserDataInput {
  description: String
  duration: Int
  generateClientSheet: Boolean
  id: Int
  name: String
  price: Float
}

input EventUpdateWithWhereUniqueWithoutUserInput {
  data: EventUpdateWithoutUserDataInput!
  where: EventWhereUniqueInput!
}

input EventUpsertWithWhereUniqueWithoutUserInput {
  create: EventCreateWithoutUserInput!
  update: EventUpdateWithoutUserDataInput!
  where: EventWhereUniqueInput!
}

input EventWhereUniqueInput {
  id: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

type Mutation {
  createOneAvailabilityModifier(data: AvailabilityModifierCreateInput!): AvailabilityModifier!
  createOneEvent(data: EventCreateInput!): Event!
  createOneRecurrentAvailability(data: RecurrentAvailabilityCreateInput!): RecurrentAvailability!
  deleteOneAvailabilityModifier(where: AvailabilityModifierWhereUniqueInput!): AvailabilityModifier
  deleteOneEvent(where: EventWhereUniqueInput!): Event
  deleteOneRecurrentAvailability(where: RecurrentAvailabilityWhereUniqueInput!): RecurrentAvailability
  deleteOneUser(where: UserWhereUniqueInput!): User
  signin(email: String!, password: String!): AuthPayload!
  signup(email: String!, firstName: String!, lastName: String!, password: String!, passwordConfirmation: String!): AuthPayload!
  updateCurrentUser(email: String, firstName: String, lastName: String, newPassword: String, newPasswordConfirmation: String, oldPassword: String): User!
  updateOneAvailabilityModifier(data: AvailabilityModifierUpdateInput!, where: AvailabilityModifierWhereUniqueInput!): AvailabilityModifier
  updateOneEvent(data: EventUpdateInput!, where: EventWhereUniqueInput!): Event
  updateOneRecurrentAvailability(data: RecurrentAvailabilityUpdateInput!, where: RecurrentAvailabilityWhereUniqueInput!): RecurrentAvailability
  upsertOneAvailabilityModifier(create: AvailabilityModifierCreateInput!, update: AvailabilityModifierUpdateInput!, where: AvailabilityModifierWhereUniqueInput!): AvailabilityModifier!
  upsertOneEvent(create: EventCreateInput!, update: EventUpdateInput!, where: EventWhereUniqueInput!): Event!
  upsertOneRecurrentAvailability(create: RecurrentAvailabilityCreateInput!, update: RecurrentAvailabilityUpdateInput!, where: RecurrentAvailabilityWhereUniqueInput!): RecurrentAvailability!
}

input NullableFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: Float
  notIn: [Float!]
}

input NullableIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

input NullableStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type Query {
  availabilityModifier(where: AvailabilityModifierWhereUniqueInput!): AvailabilityModifier
  availabilityModifiers(after: AvailabilityModifierWhereUniqueInput, before: AvailabilityModifierWhereUniqueInput, first: Int, last: Int, skip: Int): [AvailabilityModifier!]!
  event(where: EventWhereUniqueInput!): Event
  events(after: EventWhereUniqueInput, before: EventWhereUniqueInput, first: Int, last: Int, skip: Int): [Event!]!
  me: AuthPayload!
  recurrentAvailabilities(after: RecurrentAvailabilityWhereUniqueInput, before: RecurrentAvailabilityWhereUniqueInput, first: Int, last: Int, skip: Int): [RecurrentAvailability!]!
  recurrentAvailability(where: RecurrentAvailabilityWhereUniqueInput!): RecurrentAvailability
  user(where: UserWhereUniqueInput!): User
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int, skip: Int): [User!]!
}

type RecurrentAvailability {
  day: Day!
  endTime: Int!
  id: Int!
  startTime: Int!
  user: User
}

input RecurrentAvailabilityCreateInput {
  day: Day!
  endTime: Int!
  startTime: Int!
  user: UserCreateOneWithoutRecurrentAvailabilitiesInput
}

input RecurrentAvailabilityCreateManyWithoutUserInput {
  connect: [RecurrentAvailabilityWhereUniqueInput!]
  create: [RecurrentAvailabilityCreateWithoutUserInput!]
}

input RecurrentAvailabilityCreateWithoutUserInput {
  day: Day!
  endTime: Int!
  startTime: Int!
}

input RecurrentAvailabilityScalarWhereInput {
  AND: [RecurrentAvailabilityScalarWhereInput!]
  day: Day
  endTime: IntFilter
  id: IntFilter
  NOT: [RecurrentAvailabilityScalarWhereInput!]
  OR: [RecurrentAvailabilityScalarWhereInput!]
  startTime: IntFilter
  userId: NullableIntFilter
}

input RecurrentAvailabilityUpdateInput {
  day: Day
  endTime: Int
  id: Int
  startTime: Int
  user: UserUpdateOneWithoutRecurrentAvailabilitiesInput
}

input RecurrentAvailabilityUpdateManyDataInput {
  day: Day
  endTime: Int
  id: Int
  startTime: Int
}

input RecurrentAvailabilityUpdateManyWithoutUserInput {
  connect: [RecurrentAvailabilityWhereUniqueInput!]
  create: [RecurrentAvailabilityCreateWithoutUserInput!]
  delete: [RecurrentAvailabilityWhereUniqueInput!]
  deleteMany: [RecurrentAvailabilityScalarWhereInput!]
  disconnect: [RecurrentAvailabilityWhereUniqueInput!]
  set: [RecurrentAvailabilityWhereUniqueInput!]
  update: [RecurrentAvailabilityUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [RecurrentAvailabilityUpdateManyWithWhereNestedInput!]
  upsert: [RecurrentAvailabilityUpsertWithWhereUniqueWithoutUserInput!]
}

input RecurrentAvailabilityUpdateManyWithWhereNestedInput {
  data: RecurrentAvailabilityUpdateManyDataInput!
  where: RecurrentAvailabilityScalarWhereInput!
}

input RecurrentAvailabilityUpdateWithoutUserDataInput {
  day: Day
  endTime: Int
  id: Int
  startTime: Int
}

input RecurrentAvailabilityUpdateWithWhereUniqueWithoutUserInput {
  data: RecurrentAvailabilityUpdateWithoutUserDataInput!
  where: RecurrentAvailabilityWhereUniqueInput!
}

input RecurrentAvailabilityUpsertWithWhereUniqueWithoutUserInput {
  create: RecurrentAvailabilityCreateWithoutUserInput!
  update: RecurrentAvailabilityUpdateWithoutUserDataInput!
  where: RecurrentAvailabilityWhereUniqueInput!
}

input RecurrentAvailabilityWhereUniqueInput {
  id: Int
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type User {
  address: String
  availabilityModifiers: [AvailabilityModifier!]!
  email: String!
  events: [Event!]!
  firstName: String!
  id: Int!
  lastName: String!
  minScheduleNotice: Int!
  recurrentAvailabilities: [RecurrentAvailability!]!
  websiteUrl: String
}

input UserCreateOneWithoutAvailabilityModifiersInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutAvailabilityModifiersInput
}

input UserCreateOneWithoutEventsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutEventsInput
}

input UserCreateOneWithoutRecurrentAvailabilitiesInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutRecurrentAvailabilitiesInput
}

input UserCreateWithoutAvailabilityModifiersInput {
  address: String
  email: String!
  events: EventCreateManyWithoutUserInput
  firstName: String!
  lastName: String!
  minScheduleNotice: Int
  password: String!
  recurrentAvailabilities: RecurrentAvailabilityCreateManyWithoutUserInput
  websiteUrl: String
}

input UserCreateWithoutEventsInput {
  address: String
  availabilityModifiers: AvailabilityModifierCreateManyWithoutUserInput
  email: String!
  firstName: String!
  lastName: String!
  minScheduleNotice: Int
  password: String!
  recurrentAvailabilities: RecurrentAvailabilityCreateManyWithoutUserInput
  websiteUrl: String
}

input UserCreateWithoutRecurrentAvailabilitiesInput {
  address: String
  availabilityModifiers: AvailabilityModifierCreateManyWithoutUserInput
  email: String!
  events: EventCreateManyWithoutUserInput
  firstName: String!
  lastName: String!
  minScheduleNotice: Int
  password: String!
  websiteUrl: String
}

input UserUpdateOneWithoutAvailabilityModifiersInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutAvailabilityModifiersInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutAvailabilityModifiersDataInput
  upsert: UserUpsertWithoutAvailabilityModifiersInput
}

input UserUpdateOneWithoutEventsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutEventsInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutEventsDataInput
  upsert: UserUpsertWithoutEventsInput
}

input UserUpdateOneWithoutRecurrentAvailabilitiesInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutRecurrentAvailabilitiesInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutRecurrentAvailabilitiesDataInput
  upsert: UserUpsertWithoutRecurrentAvailabilitiesInput
}

input UserUpdateWithoutAvailabilityModifiersDataInput {
  address: String
  email: String
  events: EventUpdateManyWithoutUserInput
  firstName: String
  id: Int
  lastName: String
  minScheduleNotice: Int
  password: String
  recurrentAvailabilities: RecurrentAvailabilityUpdateManyWithoutUserInput
  websiteUrl: String
}

input UserUpdateWithoutEventsDataInput {
  address: String
  availabilityModifiers: AvailabilityModifierUpdateManyWithoutUserInput
  email: String
  firstName: String
  id: Int
  lastName: String
  minScheduleNotice: Int
  password: String
  recurrentAvailabilities: RecurrentAvailabilityUpdateManyWithoutUserInput
  websiteUrl: String
}

input UserUpdateWithoutRecurrentAvailabilitiesDataInput {
  address: String
  availabilityModifiers: AvailabilityModifierUpdateManyWithoutUserInput
  email: String
  events: EventUpdateManyWithoutUserInput
  firstName: String
  id: Int
  lastName: String
  minScheduleNotice: Int
  password: String
  websiteUrl: String
}

input UserUpsertWithoutAvailabilityModifiersInput {
  create: UserCreateWithoutAvailabilityModifiersInput!
  update: UserUpdateWithoutAvailabilityModifiersDataInput!
}

input UserUpsertWithoutEventsInput {
  create: UserCreateWithoutEventsInput!
  update: UserUpdateWithoutEventsDataInput!
}

input UserUpsertWithoutRecurrentAvailabilitiesInput {
  create: UserCreateWithoutRecurrentAvailabilitiesInput!
  update: UserUpdateWithoutRecurrentAvailabilitiesDataInput!
}

input UserWhereUniqueInput {
  email: String
  id: Int
}
