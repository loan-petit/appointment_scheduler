### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Appointment {
  appointmentType: AppointmentType
  customer: Customer
  end: DateTime!
  googleCalendarEventId: String
  id: Int!
  start: DateTime!
  user: User
}

input AppointmentCreateInput {
  appointmentType: AppointmentTypeCreateOneWithoutAppointmentsInput
  customer: CustomerCreateOneWithoutAppointmentsInput
  end: DateTime!
  googleCalendarEventId: String
  start: DateTime!
  user: UserCreateOneWithoutAppointmentsInput
}

input AppointmentCreateManyWithoutAppointmentTypeInput {
  connect: [AppointmentWhereUniqueInput!]
  create: [AppointmentCreateWithoutAppointmentTypeInput!]
}

input AppointmentCreateManyWithoutCustomerInput {
  connect: [AppointmentWhereUniqueInput!]
  create: [AppointmentCreateWithoutCustomerInput!]
}

input AppointmentCreateManyWithoutUserInput {
  connect: [AppointmentWhereUniqueInput!]
  create: [AppointmentCreateWithoutUserInput!]
}

input AppointmentCreateWithoutAppointmentTypeInput {
  customer: CustomerCreateOneWithoutAppointmentsInput
  end: DateTime!
  googleCalendarEventId: String
  start: DateTime!
  user: UserCreateOneWithoutAppointmentsInput
}

input AppointmentCreateWithoutCustomerInput {
  appointmentType: AppointmentTypeCreateOneWithoutAppointmentsInput
  end: DateTime!
  googleCalendarEventId: String
  start: DateTime!
  user: UserCreateOneWithoutAppointmentsInput
}

input AppointmentCreateWithoutUserInput {
  appointmentType: AppointmentTypeCreateOneWithoutAppointmentsInput
  customer: CustomerCreateOneWithoutAppointmentsInput
  end: DateTime!
  googleCalendarEventId: String
  start: DateTime!
}

input AppointmentFilter {
  every: AppointmentWhereInput
  none: AppointmentWhereInput
  some: AppointmentWhereInput
}

input AppointmentScalarWhereInput {
  AND: [AppointmentScalarWhereInput!]
  appointmentTypeId: NullableIntFilter
  customerId: NullableIntFilter
  end: DateTimeFilter
  googleCalendarEventId: NullableStringFilter
  id: IntFilter
  NOT: [AppointmentScalarWhereInput!]
  OR: [AppointmentScalarWhereInput!]
  start: DateTimeFilter
  userId: NullableIntFilter
}

type AppointmentType {
  description: String
  duration: Int!
  generateClientSheet: Boolean!
  id: Int!
  name: String!
  price: Float
  user: User
}

input AppointmentTypeCreateInput {
  appointments: AppointmentCreateManyWithoutAppointmentTypeInput
  description: String
  duration: Int!
  generateClientSheet: Boolean
  name: String!
  price: Float
  user: UserCreateOneWithoutAppointmentTypesInput
}

input AppointmentTypeCreateManyWithoutUserInput {
  connect: [AppointmentTypeWhereUniqueInput!]
  create: [AppointmentTypeCreateWithoutUserInput!]
}

input AppointmentTypeCreateOneWithoutAppointmentsInput {
  connect: AppointmentTypeWhereUniqueInput
  create: AppointmentTypeCreateWithoutAppointmentsInput
}

input AppointmentTypeCreateWithoutAppointmentsInput {
  description: String
  duration: Int!
  generateClientSheet: Boolean
  name: String!
  price: Float
  user: UserCreateOneWithoutAppointmentTypesInput
}

input AppointmentTypeCreateWithoutUserInput {
  appointments: AppointmentCreateManyWithoutAppointmentTypeInput
  description: String
  duration: Int!
  generateClientSheet: Boolean
  name: String!
  price: Float
}

input AppointmentTypeFilter {
  every: AppointmentTypeWhereInput
  none: AppointmentTypeWhereInput
  some: AppointmentTypeWhereInput
}

input AppointmentTypeScalarWhereInput {
  AND: [AppointmentTypeScalarWhereInput!]
  appointments: AppointmentFilter
  description: NullableStringFilter
  duration: IntFilter
  generateClientSheet: BooleanFilter
  id: IntFilter
  name: StringFilter
  NOT: [AppointmentTypeScalarWhereInput!]
  OR: [AppointmentTypeScalarWhereInput!]
  price: NullableFloatFilter
  userId: NullableIntFilter
}

input AppointmentTypeUpdateInput {
  appointments: AppointmentUpdateManyWithoutAppointmentTypeInput
  description: String
  duration: Int
  generateClientSheet: Boolean
  id: Int
  name: String
  price: Float
  user: UserUpdateOneWithoutAppointmentTypesInput
}

input AppointmentTypeUpdateManyDataInput {
  description: String
  duration: Int
  generateClientSheet: Boolean
  id: Int
  name: String
  price: Float
}

input AppointmentTypeUpdateManyWithoutUserInput {
  connect: [AppointmentTypeWhereUniqueInput!]
  create: [AppointmentTypeCreateWithoutUserInput!]
  delete: [AppointmentTypeWhereUniqueInput!]
  deleteMany: [AppointmentTypeScalarWhereInput!]
  disconnect: [AppointmentTypeWhereUniqueInput!]
  set: [AppointmentTypeWhereUniqueInput!]
  update: [AppointmentTypeUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [AppointmentTypeUpdateManyWithWhereNestedInput!]
  upsert: [AppointmentTypeUpsertWithWhereUniqueWithoutUserInput!]
}

input AppointmentTypeUpdateManyWithWhereNestedInput {
  data: AppointmentTypeUpdateManyDataInput!
  where: AppointmentTypeScalarWhereInput!
}

input AppointmentTypeUpdateOneWithoutAppointmentsInput {
  connect: AppointmentTypeWhereUniqueInput
  create: AppointmentTypeCreateWithoutAppointmentsInput
  delete: Boolean
  disconnect: Boolean
  update: AppointmentTypeUpdateWithoutAppointmentsDataInput
  upsert: AppointmentTypeUpsertWithoutAppointmentsInput
}

input AppointmentTypeUpdateWithoutAppointmentsDataInput {
  description: String
  duration: Int
  generateClientSheet: Boolean
  id: Int
  name: String
  price: Float
  user: UserUpdateOneWithoutAppointmentTypesInput
}

input AppointmentTypeUpdateWithoutUserDataInput {
  appointments: AppointmentUpdateManyWithoutAppointmentTypeInput
  description: String
  duration: Int
  generateClientSheet: Boolean
  id: Int
  name: String
  price: Float
}

input AppointmentTypeUpdateWithWhereUniqueWithoutUserInput {
  data: AppointmentTypeUpdateWithoutUserDataInput!
  where: AppointmentTypeWhereUniqueInput!
}

input AppointmentTypeUpsertWithoutAppointmentsInput {
  create: AppointmentTypeCreateWithoutAppointmentsInput!
  update: AppointmentTypeUpdateWithoutAppointmentsDataInput!
}

input AppointmentTypeUpsertWithWhereUniqueWithoutUserInput {
  create: AppointmentTypeCreateWithoutUserInput!
  update: AppointmentTypeUpdateWithoutUserDataInput!
  where: AppointmentTypeWhereUniqueInput!
}

input AppointmentTypeWhereInput {
  AND: [AppointmentTypeWhereInput!]
  appointments: AppointmentFilter
  description: NullableStringFilter
  duration: IntFilter
  generateClientSheet: BooleanFilter
  id: IntFilter
  name: StringFilter
  NOT: [AppointmentTypeWhereInput!]
  OR: [AppointmentTypeWhereInput!]
  price: NullableFloatFilter
  user: UserWhereInput
  userId: NullableIntFilter
}

input AppointmentTypeWhereUniqueInput {
  id: Int
}

input AppointmentUpdateInput {
  appointmentType: AppointmentTypeUpdateOneWithoutAppointmentsInput
  customer: CustomerUpdateOneWithoutAppointmentsInput
  end: DateTime
  googleCalendarEventId: String
  id: Int
  start: DateTime
  user: UserUpdateOneWithoutAppointmentsInput
}

input AppointmentUpdateManyDataInput {
  end: DateTime
  googleCalendarEventId: String
  id: Int
  start: DateTime
}

input AppointmentUpdateManyWithoutAppointmentTypeInput {
  connect: [AppointmentWhereUniqueInput!]
  create: [AppointmentCreateWithoutAppointmentTypeInput!]
  delete: [AppointmentWhereUniqueInput!]
  deleteMany: [AppointmentScalarWhereInput!]
  disconnect: [AppointmentWhereUniqueInput!]
  set: [AppointmentWhereUniqueInput!]
  update: [AppointmentUpdateWithWhereUniqueWithoutAppointmentTypeInput!]
  updateMany: [AppointmentUpdateManyWithWhereNestedInput!]
  upsert: [AppointmentUpsertWithWhereUniqueWithoutAppointmentTypeInput!]
}

input AppointmentUpdateManyWithoutCustomerInput {
  connect: [AppointmentWhereUniqueInput!]
  create: [AppointmentCreateWithoutCustomerInput!]
  delete: [AppointmentWhereUniqueInput!]
  deleteMany: [AppointmentScalarWhereInput!]
  disconnect: [AppointmentWhereUniqueInput!]
  set: [AppointmentWhereUniqueInput!]
  update: [AppointmentUpdateWithWhereUniqueWithoutCustomerInput!]
  updateMany: [AppointmentUpdateManyWithWhereNestedInput!]
  upsert: [AppointmentUpsertWithWhereUniqueWithoutCustomerInput!]
}

input AppointmentUpdateManyWithoutUserInput {
  connect: [AppointmentWhereUniqueInput!]
  create: [AppointmentCreateWithoutUserInput!]
  delete: [AppointmentWhereUniqueInput!]
  deleteMany: [AppointmentScalarWhereInput!]
  disconnect: [AppointmentWhereUniqueInput!]
  set: [AppointmentWhereUniqueInput!]
  update: [AppointmentUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [AppointmentUpdateManyWithWhereNestedInput!]
  upsert: [AppointmentUpsertWithWhereUniqueWithoutUserInput!]
}

input AppointmentUpdateManyWithWhereNestedInput {
  data: AppointmentUpdateManyDataInput!
  where: AppointmentScalarWhereInput!
}

input AppointmentUpdateWithoutAppointmentTypeDataInput {
  customer: CustomerUpdateOneWithoutAppointmentsInput
  end: DateTime
  googleCalendarEventId: String
  id: Int
  start: DateTime
  user: UserUpdateOneWithoutAppointmentsInput
}

input AppointmentUpdateWithoutCustomerDataInput {
  appointmentType: AppointmentTypeUpdateOneWithoutAppointmentsInput
  end: DateTime
  googleCalendarEventId: String
  id: Int
  start: DateTime
  user: UserUpdateOneWithoutAppointmentsInput
}

input AppointmentUpdateWithoutUserDataInput {
  appointmentType: AppointmentTypeUpdateOneWithoutAppointmentsInput
  customer: CustomerUpdateOneWithoutAppointmentsInput
  end: DateTime
  googleCalendarEventId: String
  id: Int
  start: DateTime
}

input AppointmentUpdateWithWhereUniqueWithoutAppointmentTypeInput {
  data: AppointmentUpdateWithoutAppointmentTypeDataInput!
  where: AppointmentWhereUniqueInput!
}

input AppointmentUpdateWithWhereUniqueWithoutCustomerInput {
  data: AppointmentUpdateWithoutCustomerDataInput!
  where: AppointmentWhereUniqueInput!
}

input AppointmentUpdateWithWhereUniqueWithoutUserInput {
  data: AppointmentUpdateWithoutUserDataInput!
  where: AppointmentWhereUniqueInput!
}

input AppointmentUpsertWithWhereUniqueWithoutAppointmentTypeInput {
  create: AppointmentCreateWithoutAppointmentTypeInput!
  update: AppointmentUpdateWithoutAppointmentTypeDataInput!
  where: AppointmentWhereUniqueInput!
}

input AppointmentUpsertWithWhereUniqueWithoutCustomerInput {
  create: AppointmentCreateWithoutCustomerInput!
  update: AppointmentUpdateWithoutCustomerDataInput!
  where: AppointmentWhereUniqueInput!
}

input AppointmentUpsertWithWhereUniqueWithoutUserInput {
  create: AppointmentCreateWithoutUserInput!
  update: AppointmentUpdateWithoutUserDataInput!
  where: AppointmentWhereUniqueInput!
}

input AppointmentWhereInput {
  AND: [AppointmentWhereInput!]
  appointmentType: AppointmentTypeWhereInput
  appointmentTypeId: NullableIntFilter
  customer: CustomerWhereInput
  customerId: NullableIntFilter
  end: DateTimeFilter
  googleCalendarEventId: NullableStringFilter
  id: IntFilter
  NOT: [AppointmentWhereInput!]
  OR: [AppointmentWhereInput!]
  start: DateTimeFilter
  user: UserWhereInput
  userId: NullableIntFilter
}

input AppointmentWhereUniqueInput {
  id: Int
}

type AuthPayload {
  expiresIn: Int!
  token: String!
  user: User!
}

type AvailabilityModifier {
  end: DateTime!
  id: Int!
  isExclusive: Boolean!
  start: DateTime!
  user: User
}

input AvailabilityModifierCreateInput {
  end: DateTime!
  isExclusive: Boolean!
  start: DateTime!
  user: UserCreateOneWithoutAvailabilityModifiersInput
}

input AvailabilityModifierCreateManyWithoutUserInput {
  connect: [AvailabilityModifierWhereUniqueInput!]
  create: [AvailabilityModifierCreateWithoutUserInput!]
}

input AvailabilityModifierCreateWithoutUserInput {
  end: DateTime!
  isExclusive: Boolean!
  start: DateTime!
}

input AvailabilityModifierFilter {
  every: AvailabilityModifierWhereInput
  none: AvailabilityModifierWhereInput
  some: AvailabilityModifierWhereInput
}

input AvailabilityModifierScalarWhereInput {
  AND: [AvailabilityModifierScalarWhereInput!]
  end: DateTimeFilter
  id: IntFilter
  isExclusive: BooleanFilter
  NOT: [AvailabilityModifierScalarWhereInput!]
  OR: [AvailabilityModifierScalarWhereInput!]
  start: DateTimeFilter
  userId: NullableIntFilter
}

input AvailabilityModifierUpdateInput {
  end: DateTime
  id: Int
  isExclusive: Boolean
  start: DateTime
  user: UserUpdateOneWithoutAvailabilityModifiersInput
}

input AvailabilityModifierUpdateManyDataInput {
  end: DateTime
  id: Int
  isExclusive: Boolean
  start: DateTime
}

input AvailabilityModifierUpdateManyWithoutUserInput {
  connect: [AvailabilityModifierWhereUniqueInput!]
  create: [AvailabilityModifierCreateWithoutUserInput!]
  delete: [AvailabilityModifierWhereUniqueInput!]
  deleteMany: [AvailabilityModifierScalarWhereInput!]
  disconnect: [AvailabilityModifierWhereUniqueInput!]
  set: [AvailabilityModifierWhereUniqueInput!]
  update: [AvailabilityModifierUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [AvailabilityModifierUpdateManyWithWhereNestedInput!]
  upsert: [AvailabilityModifierUpsertWithWhereUniqueWithoutUserInput!]
}

input AvailabilityModifierUpdateManyWithWhereNestedInput {
  data: AvailabilityModifierUpdateManyDataInput!
  where: AvailabilityModifierScalarWhereInput!
}

input AvailabilityModifierUpdateWithoutUserDataInput {
  end: DateTime
  id: Int
  isExclusive: Boolean
  start: DateTime
}

input AvailabilityModifierUpdateWithWhereUniqueWithoutUserInput {
  data: AvailabilityModifierUpdateWithoutUserDataInput!
  where: AvailabilityModifierWhereUniqueInput!
}

input AvailabilityModifierUpsertWithWhereUniqueWithoutUserInput {
  create: AvailabilityModifierCreateWithoutUserInput!
  update: AvailabilityModifierUpdateWithoutUserDataInput!
  where: AvailabilityModifierWhereUniqueInput!
}

input AvailabilityModifierWhereInput {
  AND: [AvailabilityModifierWhereInput!]
  end: DateTimeFilter
  id: IntFilter
  isExclusive: BooleanFilter
  NOT: [AvailabilityModifierWhereInput!]
  OR: [AvailabilityModifierWhereInput!]
  start: DateTimeFilter
  user: UserWhereInput
  userId: NullableIntFilter
}

input AvailabilityModifierWhereUniqueInput {
  id: Int
}

input BooleanFilter {
  equals: Boolean
  not: Boolean
}

type Customer {
  address: String
  appointments: [Appointment!]!
  email: String!
  firstName: String!
  id: Int!
  isBlackListed: Boolean!
  lastName: String!
  phone: String
}

input CustomerCreateInput {
  address: String
  appointments: AppointmentCreateManyWithoutCustomerInput
  email: String!
  firstName: String!
  isBlackListed: Boolean
  lastName: String!
  phone: String
}

input CustomerCreateOneWithoutAppointmentsInput {
  connect: CustomerWhereUniqueInput
  create: CustomerCreateWithoutAppointmentsInput
}

input CustomerCreateWithoutAppointmentsInput {
  address: String
  email: String!
  firstName: String!
  isBlackListed: Boolean
  lastName: String!
  phone: String
}

input CustomerUpdateInput {
  address: String
  appointments: AppointmentUpdateManyWithoutCustomerInput
  email: String
  firstName: String
  id: Int
  isBlackListed: Boolean
  lastName: String
  phone: String
}

input CustomerUpdateOneWithoutAppointmentsInput {
  connect: CustomerWhereUniqueInput
  create: CustomerCreateWithoutAppointmentsInput
  delete: Boolean
  disconnect: Boolean
  update: CustomerUpdateWithoutAppointmentsDataInput
  upsert: CustomerUpsertWithoutAppointmentsInput
}

input CustomerUpdateWithoutAppointmentsDataInput {
  address: String
  email: String
  firstName: String
  id: Int
  isBlackListed: Boolean
  lastName: String
  phone: String
}

input CustomerUpsertWithoutAppointmentsInput {
  create: CustomerCreateWithoutAppointmentsInput!
  update: CustomerUpdateWithoutAppointmentsDataInput!
}

input CustomerWhereInput {
  address: NullableStringFilter
  AND: [CustomerWhereInput!]
  appointments: AppointmentFilter
  email: StringFilter
  firstName: StringFilter
  id: IntFilter
  isBlackListed: BooleanFilter
  lastName: StringFilter
  NOT: [CustomerWhereInput!]
  OR: [CustomerWhereInput!]
  phone: NullableStringFilter
}

input CustomerWhereUniqueInput {
  email: String
  id: Int
}

scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

enum Day {
  FRIDAY
  MONDAY
  SATURDAY
  SUNDAY
  THURSDAY
  TUESDAY
  WEDNESDAY
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

type Mutation {
  createOneAppointment(data: AppointmentCreateInput!): Appointment!
  createOneAppointmentType(data: AppointmentTypeCreateInput!): AppointmentType!
  createOneAvailabilityModifier(data: AvailabilityModifierCreateInput!): AvailabilityModifier!
  createOneCustomer(data: CustomerCreateInput!): Customer!
  createOneRecurrentAvailability(data: RecurrentAvailabilityCreateInput!): RecurrentAvailability!
  deleteOneAppointment(where: AppointmentWhereUniqueInput!): Appointment
  deleteOneAppointmentType(where: AppointmentTypeWhereUniqueInput!): AppointmentType
  deleteOneAvailabilityModifier(where: AvailabilityModifierWhereUniqueInput!): AvailabilityModifier
  deleteOneCustomer(where: CustomerWhereUniqueInput!): Customer
  deleteOneRecurrentAvailability(where: RecurrentAvailabilityWhereUniqueInput!): RecurrentAvailability
  deleteOneUser(where: UserWhereUniqueInput!): User
  signin(email: String, oAuthToken: OAuthTokenInput, password: String): AuthPayload!
  signup(email: String!, firstName: String!, lastName: String!, oAuthToken: OAuthTokenInput, password: String, passwordConfirmation: String): AuthPayload!
  updateCurrentUser(address: String, email: String, firstName: String, lastName: String, minScheduleNotice: Int, newPassword: String, newPasswordConfirmation: String, oAuthToken: OAuthTokenInput, oldPassword: String, websiteUrl: String): User!
  updateOneAppointment(data: AppointmentUpdateInput!, where: AppointmentWhereUniqueInput!): Appointment
  updateOneAppointmentType(data: AppointmentTypeUpdateInput!, where: AppointmentTypeWhereUniqueInput!): AppointmentType
  updateOneAvailabilityModifier(data: AvailabilityModifierUpdateInput!, where: AvailabilityModifierWhereUniqueInput!): AvailabilityModifier
  updateOneCustomer(data: CustomerUpdateInput!, where: CustomerWhereUniqueInput!): Customer
  updateOneRecurrentAvailability(data: RecurrentAvailabilityUpdateInput!, where: RecurrentAvailabilityWhereUniqueInput!): RecurrentAvailability
  upsertOneAppointmentType(create: AppointmentTypeCreateInput!, update: AppointmentTypeUpdateInput!, where: AppointmentTypeWhereUniqueInput!): AppointmentType!
  upsertOneAvailabilityModifier(create: AvailabilityModifierCreateInput!, update: AvailabilityModifierUpdateInput!, where: AvailabilityModifierWhereUniqueInput!): AvailabilityModifier!
  upsertOneCustomer(create: CustomerCreateInput!, update: CustomerUpdateInput!, where: CustomerWhereUniqueInput!): Customer!
  upsertOneRecurrentAvailability(create: RecurrentAvailabilityCreateInput!, update: RecurrentAvailabilityUpdateInput!, where: RecurrentAvailabilityWhereUniqueInput!): RecurrentAvailability!
}

input NullableFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: Float
  notIn: [Float!]
}

input NullableIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

input NullableStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type OAuthToken {
  accessToken: String!
  id: Int!
  refreshToken: String
  user: User!
}

input OAuthTokenCreateOneWithoutUserInput {
  connect: OAuthTokenWhereUniqueInput
  create: OAuthTokenCreateWithoutUserInput
}

input OAuthTokenCreateWithoutUserInput {
  accessToken: String!
  refreshToken: String
}

input OAuthTokenInput {
  accessToken: String!
  idToken: String!
  refreshToken: String
}

input OAuthTokenUpdateOneWithoutUserInput {
  connect: OAuthTokenWhereUniqueInput
  create: OAuthTokenCreateWithoutUserInput
  delete: Boolean
  disconnect: Boolean
  update: OAuthTokenUpdateWithoutUserDataInput
  upsert: OAuthTokenUpsertWithoutUserInput
}

input OAuthTokenUpdateWithoutUserDataInput {
  accessToken: String
  id: Int
  refreshToken: String
}

input OAuthTokenUpsertWithoutUserInput {
  create: OAuthTokenCreateWithoutUserInput!
  update: OAuthTokenUpdateWithoutUserDataInput!
}

input OAuthTokenWhereInput {
  accessToken: StringFilter
  AND: [OAuthTokenWhereInput!]
  id: IntFilter
  NOT: [OAuthTokenWhereInput!]
  OR: [OAuthTokenWhereInput!]
  refreshToken: NullableStringFilter
  user: UserWhereInput
  userId: IntFilter
}

input OAuthTokenWhereUniqueInput {
  id: Int
}

type Query {
  appointment(where: AppointmentWhereUniqueInput!): Appointment
  appointments(skip: Int): [Appointment!]!
  appointmentType(where: AppointmentTypeWhereUniqueInput!): AppointmentType
  appointmentTypes(skip: Int): [AppointmentType!]!
  availabilityModifier(where: AvailabilityModifierWhereUniqueInput!): AvailabilityModifier
  availabilityModifiers(skip: Int): [AvailabilityModifier!]!
  customer(where: CustomerWhereUniqueInput!): Customer
  customers(skip: Int): [Customer!]!
  me: AuthPayload!
  recurrentAvailabilities(skip: Int): [RecurrentAvailability!]!
  recurrentAvailability(where: RecurrentAvailabilityWhereUniqueInput!): RecurrentAvailability
  user(where: UserWhereUniqueInput!): User
  users(skip: Int): [User!]!
}

type RecurrentAvailability {
  day: Day!
  endTime: Int!
  id: Int!
  startTime: Int!
  user: User
}

input RecurrentAvailabilityCreateInput {
  day: Day!
  endTime: Int!
  startTime: Int!
  user: UserCreateOneWithoutRecurrentAvailabilitiesInput
}

input RecurrentAvailabilityCreateManyWithoutUserInput {
  connect: [RecurrentAvailabilityWhereUniqueInput!]
  create: [RecurrentAvailabilityCreateWithoutUserInput!]
}

input RecurrentAvailabilityCreateWithoutUserInput {
  day: Day!
  endTime: Int!
  startTime: Int!
}

input RecurrentAvailabilityFilter {
  every: RecurrentAvailabilityWhereInput
  none: RecurrentAvailabilityWhereInput
  some: RecurrentAvailabilityWhereInput
}

input RecurrentAvailabilityScalarWhereInput {
  AND: [RecurrentAvailabilityScalarWhereInput!]
  day: Day
  endTime: IntFilter
  id: IntFilter
  NOT: [RecurrentAvailabilityScalarWhereInput!]
  OR: [RecurrentAvailabilityScalarWhereInput!]
  startTime: IntFilter
  userId: NullableIntFilter
}

input RecurrentAvailabilityUpdateInput {
  day: Day
  endTime: Int
  id: Int
  startTime: Int
  user: UserUpdateOneWithoutRecurrentAvailabilitiesInput
}

input RecurrentAvailabilityUpdateManyDataInput {
  day: Day
  endTime: Int
  id: Int
  startTime: Int
}

input RecurrentAvailabilityUpdateManyWithoutUserInput {
  connect: [RecurrentAvailabilityWhereUniqueInput!]
  create: [RecurrentAvailabilityCreateWithoutUserInput!]
  delete: [RecurrentAvailabilityWhereUniqueInput!]
  deleteMany: [RecurrentAvailabilityScalarWhereInput!]
  disconnect: [RecurrentAvailabilityWhereUniqueInput!]
  set: [RecurrentAvailabilityWhereUniqueInput!]
  update: [RecurrentAvailabilityUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [RecurrentAvailabilityUpdateManyWithWhereNestedInput!]
  upsert: [RecurrentAvailabilityUpsertWithWhereUniqueWithoutUserInput!]
}

input RecurrentAvailabilityUpdateManyWithWhereNestedInput {
  data: RecurrentAvailabilityUpdateManyDataInput!
  where: RecurrentAvailabilityScalarWhereInput!
}

input RecurrentAvailabilityUpdateWithoutUserDataInput {
  day: Day
  endTime: Int
  id: Int
  startTime: Int
}

input RecurrentAvailabilityUpdateWithWhereUniqueWithoutUserInput {
  data: RecurrentAvailabilityUpdateWithoutUserDataInput!
  where: RecurrentAvailabilityWhereUniqueInput!
}

input RecurrentAvailabilityUpsertWithWhereUniqueWithoutUserInput {
  create: RecurrentAvailabilityCreateWithoutUserInput!
  update: RecurrentAvailabilityUpdateWithoutUserDataInput!
  where: RecurrentAvailabilityWhereUniqueInput!
}

input RecurrentAvailabilityWhereInput {
  AND: [RecurrentAvailabilityWhereInput!]
  day: Day
  endTime: IntFilter
  id: IntFilter
  NOT: [RecurrentAvailabilityWhereInput!]
  OR: [RecurrentAvailabilityWhereInput!]
  startTime: IntFilter
  user: UserWhereInput
  userId: NullableIntFilter
}

input RecurrentAvailabilityWhereUniqueInput {
  id: Int
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type User {
  address: String
  appointments: [Appointment!]!
  appointmentTypes: [AppointmentType!]!
  availabilityModifiers: [AvailabilityModifier!]!
  email: String!
  firstName: String!
  id: Int!
  lastName: String!
  minScheduleNotice: Int!
  password: String
  phone: String
  recurrentAvailabilities: [RecurrentAvailability!]!
  username: String!
  websiteUrl: String
}

input UserCreateOneWithoutAppointmentsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutAppointmentsInput
}

input UserCreateOneWithoutAppointmentTypesInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutAppointmentTypesInput
}

input UserCreateOneWithoutAvailabilityModifiersInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutAvailabilityModifiersInput
}

input UserCreateOneWithoutRecurrentAvailabilitiesInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutRecurrentAvailabilitiesInput
}

input UserCreateWithoutAppointmentsInput {
  address: String
  appointmentTypes: AppointmentTypeCreateManyWithoutUserInput
  availabilityModifiers: AvailabilityModifierCreateManyWithoutUserInput
  email: String!
  firstName: String!
  googleId: String
  lastName: String!
  minScheduleNotice: Int
  oAuthToken: OAuthTokenCreateOneWithoutUserInput
  password: String
  phone: String
  recurrentAvailabilities: RecurrentAvailabilityCreateManyWithoutUserInput
  username: String!
  websiteUrl: String
}

input UserCreateWithoutAppointmentTypesInput {
  address: String
  appointments: AppointmentCreateManyWithoutUserInput
  availabilityModifiers: AvailabilityModifierCreateManyWithoutUserInput
  email: String!
  firstName: String!
  googleId: String
  lastName: String!
  minScheduleNotice: Int
  oAuthToken: OAuthTokenCreateOneWithoutUserInput
  password: String
  phone: String
  recurrentAvailabilities: RecurrentAvailabilityCreateManyWithoutUserInput
  username: String!
  websiteUrl: String
}

input UserCreateWithoutAvailabilityModifiersInput {
  address: String
  appointments: AppointmentCreateManyWithoutUserInput
  appointmentTypes: AppointmentTypeCreateManyWithoutUserInput
  email: String!
  firstName: String!
  googleId: String
  lastName: String!
  minScheduleNotice: Int
  oAuthToken: OAuthTokenCreateOneWithoutUserInput
  password: String
  phone: String
  recurrentAvailabilities: RecurrentAvailabilityCreateManyWithoutUserInput
  username: String!
  websiteUrl: String
}

input UserCreateWithoutRecurrentAvailabilitiesInput {
  address: String
  appointments: AppointmentCreateManyWithoutUserInput
  appointmentTypes: AppointmentTypeCreateManyWithoutUserInput
  availabilityModifiers: AvailabilityModifierCreateManyWithoutUserInput
  email: String!
  firstName: String!
  googleId: String
  lastName: String!
  minScheduleNotice: Int
  oAuthToken: OAuthTokenCreateOneWithoutUserInput
  password: String
  phone: String
  username: String!
  websiteUrl: String
}

input UserUpdateOneWithoutAppointmentsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutAppointmentsInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutAppointmentsDataInput
  upsert: UserUpsertWithoutAppointmentsInput
}

input UserUpdateOneWithoutAppointmentTypesInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutAppointmentTypesInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutAppointmentTypesDataInput
  upsert: UserUpsertWithoutAppointmentTypesInput
}

input UserUpdateOneWithoutAvailabilityModifiersInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutAvailabilityModifiersInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutAvailabilityModifiersDataInput
  upsert: UserUpsertWithoutAvailabilityModifiersInput
}

input UserUpdateOneWithoutRecurrentAvailabilitiesInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutRecurrentAvailabilitiesInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutRecurrentAvailabilitiesDataInput
  upsert: UserUpsertWithoutRecurrentAvailabilitiesInput
}

input UserUpdateWithoutAppointmentsDataInput {
  address: String
  appointmentTypes: AppointmentTypeUpdateManyWithoutUserInput
  availabilityModifiers: AvailabilityModifierUpdateManyWithoutUserInput
  email: String
  firstName: String
  googleId: String
  id: Int
  lastName: String
  minScheduleNotice: Int
  oAuthToken: OAuthTokenUpdateOneWithoutUserInput
  password: String
  phone: String
  recurrentAvailabilities: RecurrentAvailabilityUpdateManyWithoutUserInput
  username: String
  websiteUrl: String
}

input UserUpdateWithoutAppointmentTypesDataInput {
  address: String
  appointments: AppointmentUpdateManyWithoutUserInput
  availabilityModifiers: AvailabilityModifierUpdateManyWithoutUserInput
  email: String
  firstName: String
  googleId: String
  id: Int
  lastName: String
  minScheduleNotice: Int
  oAuthToken: OAuthTokenUpdateOneWithoutUserInput
  password: String
  phone: String
  recurrentAvailabilities: RecurrentAvailabilityUpdateManyWithoutUserInput
  username: String
  websiteUrl: String
}

input UserUpdateWithoutAvailabilityModifiersDataInput {
  address: String
  appointments: AppointmentUpdateManyWithoutUserInput
  appointmentTypes: AppointmentTypeUpdateManyWithoutUserInput
  email: String
  firstName: String
  googleId: String
  id: Int
  lastName: String
  minScheduleNotice: Int
  oAuthToken: OAuthTokenUpdateOneWithoutUserInput
  password: String
  phone: String
  recurrentAvailabilities: RecurrentAvailabilityUpdateManyWithoutUserInput
  username: String
  websiteUrl: String
}

input UserUpdateWithoutRecurrentAvailabilitiesDataInput {
  address: String
  appointments: AppointmentUpdateManyWithoutUserInput
  appointmentTypes: AppointmentTypeUpdateManyWithoutUserInput
  availabilityModifiers: AvailabilityModifierUpdateManyWithoutUserInput
  email: String
  firstName: String
  googleId: String
  id: Int
  lastName: String
  minScheduleNotice: Int
  oAuthToken: OAuthTokenUpdateOneWithoutUserInput
  password: String
  phone: String
  username: String
  websiteUrl: String
}

input UserUpsertWithoutAppointmentsInput {
  create: UserCreateWithoutAppointmentsInput!
  update: UserUpdateWithoutAppointmentsDataInput!
}

input UserUpsertWithoutAppointmentTypesInput {
  create: UserCreateWithoutAppointmentTypesInput!
  update: UserUpdateWithoutAppointmentTypesDataInput!
}

input UserUpsertWithoutAvailabilityModifiersInput {
  create: UserCreateWithoutAvailabilityModifiersInput!
  update: UserUpdateWithoutAvailabilityModifiersDataInput!
}

input UserUpsertWithoutRecurrentAvailabilitiesInput {
  create: UserCreateWithoutRecurrentAvailabilitiesInput!
  update: UserUpdateWithoutRecurrentAvailabilitiesDataInput!
}

input UserWhereInput {
  address: NullableStringFilter
  AND: [UserWhereInput!]
  appointments: AppointmentFilter
  appointmentTypes: AppointmentTypeFilter
  availabilityModifiers: AvailabilityModifierFilter
  email: StringFilter
  firstName: StringFilter
  googleId: NullableStringFilter
  id: IntFilter
  lastName: StringFilter
  minScheduleNotice: IntFilter
  NOT: [UserWhereInput!]
  oAuthToken: OAuthTokenWhereInput
  OR: [UserWhereInput!]
  password: NullableStringFilter
  phone: NullableStringFilter
  recurrentAvailabilities: RecurrentAvailabilityFilter
  username: StringFilter
  websiteUrl: NullableStringFilter
}

input UserWhereUniqueInput {
  email: String
  googleId: String
  id: Int
  username: String
}
